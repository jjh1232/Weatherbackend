package com.example.firstproject.Service;


import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.example.firstproject.Dto.Weather.AreaRequestDto;
import com.example.firstproject.Dto.Weather.Weatherapiresponse;
import com.example.firstproject.Entity.Weather.WeatherdataEntity;
import com.example.firstproject.Handler.WeatherServiceHandler;

@Service
public class WeatherServiceimpl implements WeatherService{

	@Autowired
	private WeatherServiceHandler weatherhandler;
	
	@Override
	public List<AreaRequestDto> getArea(Map<String, String> params) {
		// TODO Auto-generated method stub
		return null;
	}

	

	@Override
	public AreaRequestDto getCoordinate(String areacode) {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public List<String> weathersearch(String keyword) {
		// TODO Auto-generated method stub
		List<String> search=weatherhandler.weathersearch(keyword);
		
		return  search;
	}



	@Override
	public List<WeatherdataEntity> getweatherdata(String reg1, String reg2, String reg3) throws URISyntaxException, UnsupportedEncodingException {
		// TODO Auto-generated method stub
		String servicekey ="1UxOsFtGRc1qt/BSr5YDb++Bfx9rWkUUCg9Pbt8+bpYlHmJLRPr4aiWZINe4hGjWTia37Y5QAVtOO9D+6HyRFA==";
		String url="http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getUltraSrtNcst";
		String encodedServiceKey = URLEncoder.encode(servicekey, "UTF-8");
		WeatherdataEntity userdata=weatherhandler.getweatherdata(reg1, reg2, reg3);
		RestTemplate weather=new RestTemplate();
		HttpHeaders headers=new HttpHeaders();
		headers.setContentType(new MediaType("application", "JSON", Charset.forName("UTF-8")));
		StringBuilder builder = new StringBuilder(url);
		builder.append("?" + URLEncoder.encode("serviceKey", "UTF-8") + "=" + encodedServiceKey);
        builder.append("&" + URLEncoder.encode("pageNo", "UTF-8") + "=" + URLEncoder.encode("1", "UTF-8"));
        builder.append("&" + URLEncoder.encode("numOfRows", "UTF-8") + "=" + URLEncoder.encode("1000", "UTF-8"));
        builder.append("&" + URLEncoder.encode("dataType", "UTF-8") + "=" + URLEncoder.encode("JSON", "UTF-8"));
        builder.append("&" + URLEncoder.encode("base_date", "UTF-8") + "=" + URLEncoder.encode("20230917", "UTF-8"));
        builder.append("&" + URLEncoder.encode("base_time", "UTF-8") + "=" + URLEncoder.encode("1200", "UTF-8"));
        builder.append("&" + URLEncoder.encode("nx", "UTF-8") + "=" + URLEncoder.encode(userdata.getGridx(), "UTF-8"));
        builder.append("&" + URLEncoder.encode("ny", "UTF-8") + "=" + URLEncoder.encode(userdata.getGridy(), "UTF-8"));
		System.out.println("urlê°’"+builder);
		URI uri=new URI(builder.toString());
		ResponseEntity<Weatherapiresponse> response=weather.exchange(uri,
				HttpMethod.GET,
				new HttpEntity<String>(headers),
				Weatherapiresponse.class
				);
		
		System.out.println(response.toString());
		return null;
	}

	

}
